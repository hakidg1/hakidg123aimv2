local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Camera = Workspace.CurrentCamera
local UserInputService = game:GetService("UserInputService")
local Replicated = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer
local RightMouseButtonHeld = false
local AimingEnabled = false

-- FOV Circle Config
local CircleRadius = 250
local Gravity = 42.12
local BulletSpeed = 1600
local TargetPlayer = nil

-- Bullet speed cache
local lastHeldItem = nil
local lastBulletSpeed = BulletSpeed

-- FOV circle
local Circle = Drawing.new("Circle")
Circle.Visible = true
Circle.Thickness = 1
Circle.NumSides = 50
Circle.Radius = CircleRadius
Circle.Filled = false
Circle.Transparency = 0.5

-- Debug line
local DebugLine = Drawing.new("Line")
DebugLine.Thickness = 1
DebugLine.Transparency = 0.8
DebugLine.Visible = false

-- Get held item name
local function getHeldItem(player)
	local target = player:FindFirstChild("CurrentSelectedObject")
	if target and target.Value and target.Value.Value then
		return target.Value.Value.Name
	end
	return nil
end

-- Bullet speed fetch
local function getBulletSpeed(player)
	local heldItemName = getHeldItem(player)
	if heldItemName == lastHeldItem and lastBulletSpeed then
		return lastBulletSpeed
	end

	lastHeldItem = heldItemName
	local bulletSpeed = 1600

	if heldItemName then
		local gunData = Replicated:FindFirstChild("GunData")
		if gunData then
			local weapon = gunData:FindFirstChild(heldItemName)
			if weapon and weapon:FindFirstChild("Stats") and weapon.Stats:FindFirstChild("BulletSettings") then
				local bulletSpeedObj = weapon.Stats.BulletSettings:FindFirstChild("BulletSpeed")
				if bulletSpeedObj then
					bulletSpeed = bulletSpeedObj.Value
				end
			end
		end
	end

	lastBulletSpeed = bulletSpeed
	return bulletSpeed
end

-- Rainbow FOV circle update
local function updateCirclePosition()
	local screenSize = Camera.ViewportSize
	Circle.Position = Vector2.new(screenSize.X / 2, screenSize.Y / 2)
	local hue = (tick() % 5) / 5
	Circle.Color = Color3.fromHSV(hue, 1, 1)
end

local function isInFOV(player)
	local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
	local headPosition = Camera:WorldToViewportPoint(player.Character.ServerColliderHead.Position)
	local distanceFromCenter = (Vector2.new(headPosition.X, headPosition.Y) - screenCenter).Magnitude
	return distanceFromCenter <= CircleRadius
end

local function isPlayerVisible(player)
	if player.Character and player.Character:FindFirstChild("ServerColliderHead") then
		local screenPos = Camera:WorldToViewportPoint(player.Character.ServerColliderHead.Position)
		return screenPos.Z > 0
	end
	return false
end

local function predictFuturePosition(targetPosition, targetVelocity, bulletSpeed)
	local distance = (targetPosition - Camera.CFrame.Position).Magnitude
	local travelTime = distance / bulletSpeed
	local futurePosition = targetPosition + targetVelocity * travelTime
	local drop = Gravity * travelTime ^ 2
	return futurePosition + Vector3.new(0, drop, 0)
end

-- ðŸ”§ INSTANT STRONG SNAP AIMBOT ðŸ”§
local function aimAtTarget()
	if not TargetPlayer or not TargetPlayer.Character then return end

	local head = TargetPlayer.Character:FindFirstChild("ServerColliderHead")
	if not head then return end

	local targetPosition = head.Position
	local targetVelocity = head.Velocity or Vector3.new(0, 0, 0)
	local futurePosition = predictFuturePosition(targetPosition, targetVelocity, BulletSpeed)
	local screenPoint, onScreen = Camera:WorldToViewportPoint(futurePosition)

	if RightMouseButtonHeld and AimingEnabled and onScreen then
		local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
		local aimPosition = Vector2.new(screenPoint.X, screenPoint.Y)
		local delta = aimPosition - screenCenter

		-- Clamp to avoid overflicking
		local clampedDelta = Vector2.new(
			math.clamp(delta.X, -50, 50),
			math.clamp(delta.Y, -50, 50)
		)

		mousemoverel(clampedDelta.X, clampedDelta.Y)
	end
end

-- Find closest visible player in FOV
local function findNearestTargetToCenter()
	local nearestTarget = nil
	local shortestDistance = math.huge
	local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

	for _, player in pairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and player.Character and isPlayerVisible(player) and isInFOV(player) then
			local headPosition = player.Character.ServerColliderHead.Position
			local screenPoint = Camera:WorldToViewportPoint(headPosition)
			local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - screenCenter).Magnitude
			if distance < shortestDistance then
				shortestDistance = distance
				nearestTarget = player
			end
		end
	end

	return nearestTarget
end

-- Draw debug line
local function updateDebugLine()
	if TargetPlayer and TargetPlayer.Character then
		local head = TargetPlayer.Character:FindFirstChild("ServerColliderHead")
		if head then
			local predictedPos = predictFuturePosition(head.Position, head.Velocity or Vector3.new(), BulletSpeed)
			local screenFrom = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
			local screenTo3D = Camera:WorldToViewportPoint(predictedPos)
			local screenTo = Vector2.new(screenTo3D.X, screenTo3D.Y)

			DebugLine.From = screenFrom
			DebugLine.To = screenTo
			DebugLine.Visible = true
			DebugLine.Color = Color3.fromHSV((tick() % 5) / 5, 1, 1)
		else
			DebugLine.Visible = false
		end
	else
		DebugLine.Visible = false
	end
end

-- Input handling
UserInputService.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton2 then
		RightMouseButtonHeld = true
		AimingEnabled = true
	end
end)

UserInputService.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton2 then
		RightMouseButtonHeld = false
		AimingEnabled = false
	end
end)

-- Main loop
RunService.RenderStepped:Connect(function()
	updateCirclePosition()
	BulletSpeed = getBulletSpeed(LocalPlayer)
	TargetPlayer = findNearestTargetToCenter()
	updateDebugLine()
	aimAtTarget()
end)
